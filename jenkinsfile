pipeline {
    agent {
        docker {
            image 'python:3.9-alpine'
            args '-v $HOME/.ssh:/root/.ssh'
        }
    }
    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_ACCOUNT_ID = '123456789012' // Replace with your AWS account ID
        ECR_REPOSITORY = 'sph-monitoring'
        ECS_CLUSTER = 'sph-cluster'
        ECS_TASK_DEFINITION = 'sph-task'
        ECS_SERVICE = 'sph-service'
    }
    stages {
        stage('Build Docker image') {
            steps {
                sh 'docker build -t ${ECR_REPOSITORY}:latest .'
            }
        }
        stage('Push Docker image to ECR') {
            steps {
                withCredentials([string(credentialsId: 'aws-ecr', variable: 'ECR_LOGIN')]) {
                    sh "${ECR_LOGIN}"
                }
                sh "docker tag ${ECR_REPOSITORY}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
                sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
            }
        }
        stage('Deploy to ECS') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'aws configure set default.region ${AWS_REGION}'
                    sh 'aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}'
                    sh 'aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}'
                    sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
                    sh 'aws ecs register-task-definition --cli-input-json file://task_definition.json'
                    sh 'aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment'
                }
            }
        }
    }
}
